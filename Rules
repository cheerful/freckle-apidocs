#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'byebug'
require 'pathname'

KRAMDOWN_OPTS = {toc_levels: [2], auto_ids: true}
COLORIZER_OPTIONS = {colorizers: {javascript: :rouge, bash: :rouge}}

passthrough '/assets/*'

# Use a specific compiler for anything in the `/v2` directory, since it needs to use the v2 layout
compile '/v2/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, KRAMDOWN_OPTS
    filter :colorize_syntax, COLORIZER_OPTIONS
    layout '/v2.html'
  end
end

# Re-run the V2 compiler for the default version representation
compile '/v2/*', :rep => :default_version do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, KRAMDOWN_OPTS
    filter :colorize_syntax, COLORIZER_OPTIONS
    layout '/v2.html'
  end
end

# Use a specific compiler for anything in the `/v1` directory, since it needs to use the v1 layout
compile '/v1/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, KRAMDOWN_OPTS
    filter :colorize_syntax, COLORIZER_OPTIONS
    layout '/v1.html'
  end
end


compile '/static/**/*' do
end

route '/static/**/*' do
  "/assets" + item.identifier.to_s.sub(/\A\/static/, '')
end


# a fallback compiler, which uses the barebones, unstylized "default" layout for any `md` files that haven't been compiled yet
compile '/**/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, KRAMDOWN_OPTS
    layout item[:layout].nil? ? '/default.html' : "/#{item[:layout]}"
  end
end

route '/v2/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    if item.identifier.exts.to_s.empty?
      identifier.without_ext
    else
      item.identifier.to_s
    end
  else
    # Items at the top-level directory should just have the HTML extension
    if item.identifier.without_exts == "/v2/index"
      "/v2/index.html"
    else
      item.identifier.without_exts + '/index.html'
    end
  end
end

# Build the route for the default API version (the default for api.nokotime.com)
route '/v2/*', :rep => :default_version do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    if item.identifier.exts.to_s.empty?
      identifier.without_ext
    else
      item.identifier.to_s
    end
  else
    # Items at the top-level directory should just have the HTML extension
    if item.identifier.without_exts == "/v2/index"
      "/index.html"
    else
      item.identifier.without_exts.gsub("v2/","") + '/index.html'
    end
  end
end

route '/v1/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    if item.identifier.exts.to_s.empty?
      identifier.without_ext
    else
      item.identifier.to_s
    end
  else
    # Items at the top-level directory should just have the HTML extension
    if item.identifier.without_exts == "/v1/index"
      "/v1/index.html"
    else
      item.identifier.without_exts + '/index.html'
    end
  end
end

route '/**/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    if item.identifier.exts.to_s.empty?
      identifier.without_ext
    else
      item.identifier.to_s
    end
  else
    # Items at the top-level directory should just have the HTML extension
    puts item.identifier
    if Pathname.new(item.identifier.to_s).parent.to_s == '.'
      item.identifier.without_exts + '.html' #+ '/index.html'
    else
      item.identifier.without_exts + '/index.html'
    end
  end
end

layout '/**/*', :erb
