#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

passthrough '/assets/*'

# Use a specific compiler for anything in the `/v2` directory, since it needs to use the v2 layout
compile '/v2/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, :toc_levels => [2]
    filter :colorize_syntax,
    :colorizers => {:javascript => :pygmentsrb, :bash => :pygmentsrb}
    layout 'v2'
  end
end

# Re-run the V2 compiler for the default version representation
compile '/v2/*', :rep => :default_version do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, :toc_levels => [2]
    filter :colorize_syntax,
    :colorizers => {:javascript => :pygmentsrb, :bash => :pygmentsrb}
    layout 'v2'
  end
end

# Use a specific compiler for anything in the `/v1` directory, since it needs to use the v1 layout
compile '/v1/*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, :toc_levels => [2]
    filter :colorize_syntax,
    :colorizers => {:javascript => :pygmentsrb, :bash => :pygmentsrb}
    layout 'v1'
  end
end

# a fallback compiler, which uses the barebones, unstylized "default" layout for any `md` files that haven't been compiled yet
compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :kramdown, :toc_levels => [2]
    filter :colorize_syntax,
    :colorizers => {:javascript => :pygmentsrb, :bash => :pygmentsrb}
    layout 'default'
  end
end

# Build the route for the default API version (the default for api.letsfreckle.com)
route 'v2/*', :rep => :default_version do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    if item.identifier == '/v2/'
      "/index.html"
    else
      item.identifier.gsub("v2/","") + "index.html"
    end
  end
end

route 'v1/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    if item.identifier == '/v1/'
      "/v1/index.html"
    else
      item.identifier.chop + ".html"
    end
  end
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    if item[:extension].nil?
      item.identifier.chop
    else
      item.identifier.chop + '.' + item[:extension]
    end
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
